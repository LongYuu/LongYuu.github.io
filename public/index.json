[{"categories":["Web"],"content":"HTTP and HTTPS are widely used for deliverying various contents on the web. But do you know some advanced features of them? ","date":"2023-07-04","objectID":"/posts/http/:0:0","tags":[""],"title":"Http","uri":"/posts/http/"},{"categories":["Web"],"content":"1 HTTP HTTP, Hyper Text Transfer Protocol, is an application layer protocol based that is sent over TCP. Since HTTP is stateless, it can use cookie and session to manage the state, such as user login information. cookie is a plain text sent by Server to Client, and saved by Client. When request the same website the browser will send it to Server for checking. session is created and stored by Server, and Server can recognize it based on the JSESSIONID. But if cookie is prohibited by browser, JSESSIONID can be returned by URL rewrite. ","date":"2023-07-04","objectID":"/posts/http/:1:0","tags":[""],"title":"Http","uri":"/posts/http/"},{"categories":["Web"],"content":"Access control (CORS) CORS, Cross-Origin Resource Sharing, is an HTTP-header based mechanism that allows server to indicate any origins other than its own from which a browser should permit loading resources. ","date":"2023-07-04","objectID":"/posts/http/:1:1","tags":[""],"title":"Http","uri":"/posts/http/"},{"categories":["Web"],"content":"Authentication HTTP provides a genere framework for access control and authentication, which can be used by server to challenge a client request, and by client to provide authentication information. When it comes to client side to ask user, usually a client will present a password prompt and then issue the request including the correct Authorization header ","date":"2023-07-04","objectID":"/posts/http/:1:2","tags":[""],"title":"Http","uri":"/posts/http/"},{"categories":["Web"],"content":"2 HTTPS Added SSL/TLS to HTTP to make the data transfer more secure. ","date":"2023-07-04","objectID":"/posts/http/:2:0","tags":[""],"title":"Http","uri":"/posts/http/"},{"categories":["Blog"],"content":"Hugo is a Static Site Generator(SSG) based on Go, and it support to convert Markdown to HTML. It’s easy to use, and simple enough to build your own website. ","date":"2023-06-27","objectID":"/posts/hugo-blog/:0:0","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"1 Installation Just use one simple command, the environment is all set. brew insall hugo // MacOS winget install Hugo.Hugo.Extended // Windows sudo apt install hugo // Linux - Debian (Ubuntu) sudo dnf install hugo // Linux - Fedora (CentOS) And you can use the commands it provides to build your site, Command Description hugo version Check the version of hugo hugo new site \u003csiteName\u003e Build a new website hugo server Serving the site on localhost:1313 hugo Build the site， publishing the files to “public” dir for deployment but beforehand you must be insterested in choosing a theme of your blog. Since I’m using LoveIt, I will take this as an example. git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt Accordingly, the configuration needs to be changed to use the theme as well, # theme theme = 'LoveIt' ","date":"2023-06-27","objectID":"/posts/hugo-blog/:1:0","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"2 Directory After building a new site we can inspect the directories it created, \u003cnewSite\u003e ├─archetypes --\u003e Markdown templates │ └─default.md --\u003e By default, how Hugo creates new content ├─assets --\u003e All the files need be processed by Hugo Pipes │ ├─images │ ├─js │ └─css ├─content --\u003e Website contents ├─data --\u003e Condiguration files when generating website ├─layouts --\u003e Templates specify how views of content will be rendered ├─public --\u003e Deployment ├─resources --\u003e Caches some files to speed up generation ├─static --\u003e Store all the static content ├─themes --\u003e Pre-built themes │ └─LoveIt └─hugo.toml --\u003e Configuration ","date":"2023-06-27","objectID":"/posts/hugo-blog/:2:0","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"3 HomePage Home page style is totally based on the configurations # Home page config [params.home] # amount of RSS pages rss = 10 # Home page profile [params.home.profile] enable = true # Gravatar Email for preferred avatar in home page gravatarEmail = \"\" # URL of avatar shown in home page avatarURL = \"/images/avatar.jpg\" # title shown in home page (HTML format is supported) title = \"\" # subtitle shown in home page (HTML format is supported) subtitle = \"This is My Blog\" # whether to use typeit animation for subtitle typeit = true # whether to show social links social = true # disclaimer (HTML format is supported) disclaimer = \"\" # Home page posts [params.home.posts] enable = true # special amount of posts in each home posts page paginate = 6 # default behavior when you don't set \"hiddenFromHomePage\" in front matter defaultHiddenFromHomePage = false ","date":"2023-06-27","objectID":"/posts/hugo-blog/:3:0","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"Header # Header config [params.header] # desktop/mobile header mode [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" mobileMode = \"auto\" # Header title config [params.header.title] # URL of the LOGO logo = \"\" # title name name = \"Yu Long\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" # whether to use typeit animation for title name typeit = false The header title will be placed on the left side of the header. On the right side, we have navigation bar if you config the settings, # Menu config [menu] [[menu.main]] weight = 1 identifier = \"bio\" pre = \"\" post = \"\" name = \"Bio\" url = \"/bio/\" title = \"\" [[menu.main]] weight = 2 identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" [[menu.main]] weight = 3 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 4 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" ","date":"2023-06-27","objectID":"/posts/hugo-blog/:3:1","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"Footer # Footer config [params.footer] enable = true # custom content (HTML format is supported) custom = '' # whether to show Hugo and theme info hugo = true # whether to show copyright info copyright = true # whether to show the author author = true # Site creation time since = 2021 # license info (HTML format is supported) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' ","date":"2023-06-27","objectID":"/posts/hugo-blog/:3:2","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"4 SubPage There are two kinds of subpage, section is used for posts and list is used for tags or categories. ","date":"2023-06-27","objectID":"/posts/hugo-blog/:4:0","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"Posts The hugo command line tool will help you to create a post really fast, Command Description hugo new posts/\u003cpostTitle\u003e.md create postTitle.md under the folder content/posts # Section (all posts) page config [params.section] # special amount of posts in each section page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 For each of the post, # Page global config [params.page] # whether to hide a page from home page hiddenFromHomePage = false # whether to hide a page from search results hiddenFromSearch = false # whether to enable twemoji twemoji = false # whether to enable lightgallery lightgallery = false # whether to enable the ruby extended syntax ruby = true # whether to enable the fraction extended syntax fraction = true # whether to enable the fontawesome extended syntax fontawesome = true # whether to show link to Raw Markdown content of the content linkToMarkdown = true # whether to show the full text content in RSS rssFullText = false # Table of the contents config [params.page.toc] # whether to enable the table of the contents enable = true # whether to keep the static table of the contents in front of the post keepStatic = false # whether to make the table of the contents in the sidebar automatically collapsed auto = false # social share links in post page [params.page.share] enable = true Twitter = true HackerNews = true Reddit = true There are lots of link is support to share, including Twitter, Facebook, Linkedin, Whatsapp, Pinterest, Tumblr, HackerNews, Reddit, VK, Buffer, Xing, Line, Instapaper, Pocket, Filpboard, Weibo, Blogger, Baidu, Odnoklassniki, Evernote, Skype, Trello, Mix. ","date":"2023-06-27","objectID":"/posts/hugo-blog/:4:1","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"Tags We can add tags for each post, and hugo will categorize all the posts by their tag, # List (category or tag) page config [params.list] # special amount of posts in each list page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 ","date":"2023-06-27","objectID":"/posts/hugo-blog/:4:2","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"Categories Same with tags, category is another attribute for posts. ","date":"2023-06-27","objectID":"/posts/hugo-blog/:4:3","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"5 Search LoveIt support Lunr.js and algolia for searching. ","date":"2023-06-27","objectID":"/posts/hugo-blog/:5:0","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"algolia Algolia is a cloud search service provider, we can put our data in JSON format on Algolia server, and search based on the API it provide. # Search config [params.search] enable = true # type of search engine [\"lunr\", \"algolia\"] type = \"algolia\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"java\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" Algolia lets user to upload 10,000 JSON data, and allow to do search 100,000/month for FREE. Don’t wait to login to it and get the params we need in the application. We need to synchronize the public/index.json to Algolia whenever we publish our site. The following config will let hugo generate index.json everytime we run $ hugo # Output [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] Upload this index.json to the index you created for specific application, Create new index Upload json file We also need to configure the searchable content of our content by changing Searchable attributes, Create new index ","date":"2023-06-27","objectID":"/posts/hugo-blog/:5:1","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"6 Comments LoveIt support multiple comments API, including disqus, gitalk, valine, facebook comment, telegram comments, commento, utterance, giscus. If you store your souce code on Github, it’s easy to use utterances via Github App. Just add this app into your repository. uterances app # Comment config [params.page.comment] enable = true # utterances comment config [params.page.comment.utterances] enable = true # owner/repo repo = \"LongYuu/LongYuu.github.io\" issueTerm = \"pathname\" label = \"\" lightTheme = \"github-light\" darkTheme = \"github-dark\" Info The comment widget only works on production environment, by default, the local environment is development. ","date":"2023-06-27","objectID":"/posts/hugo-blog/:6:0","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"7 Deploy ","date":"2023-06-27","objectID":"/posts/hugo-blog/:7:0","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["Blog"],"content":"GitHub Pages GitHub provides free and fast static hosting for project pages directly from Github repository, via its GitHub Pages service and automating development workflows and build with GitHub Actions. We need to config the settings for GitHub repository to use GitHub Actions workflow for deployment, GitHub Actions for build and deployment A workflow config file .github/workflows/hugo.yaml is needed for GitHub Action, # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \"pages\" cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.114.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v3 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v3 - name: Install Node.js dependencies run: \"[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026\u0026 npm ci || true\" - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc \\ --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v2 By the above setttings, if we push the repository it will trigger the build for the code and deploy on GitHub Pages. GitHub Actions for build and deployment Try to access the domain \u003cgithubUsername\u003e.github.io to see your own Blog now! ","date":"2023-06-27","objectID":"/posts/hugo-blog/:7:1","tags":["go"],"title":"Hugo Blog","uri":"/posts/hugo-blog/"},{"categories":["setup"],"content":"Setting up the coding environing is always a obstacle for beginners to start to learn. Hope this post will help you step into the coding world and enjoy it! ","date":"2023-06-23","objectID":"/posts/setup-guide/:0:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"1 Homebrew Homebew is called the missing package manager for OS X, /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Search any package you want to install on your local on Homebrew, check its avaliablity and follow the instrcution to install. ","date":"2023-06-23","objectID":"/posts/setup-guide/:1:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"2 zsh zsh(Z shell) is built on the top of bash, but has more advanced features. brew install zsh Change the configurations by modifying its config file, vim ~/.zshrc ","date":"2023-06-23","objectID":"/posts/setup-guide/:2:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"iTerm2 iTerm2 is a replacement for terminal. brew install --cask iterm2 ","date":"2023-06-23","objectID":"/posts/setup-guide/:2:1","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"oh-my-zsh Oh-my-zsh is used as a framework to manage zsh configurations, including themes, plugins… sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" Oh-my-zsh has a lots of themes you can choose, here I use angnoster, which you need to install the powerline font as a dependency. Import the following json to setup the iTerm2 profile, { \"Ansi 6 Color\" : { \"Red Component\" : 0.16470588235294117, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.59607843137254901, \"Green Component\" : 0.63137254901960782 }, \"Tags\" : [ ], \"Ansi 12 Color\" : { \"Red Component\" : 0.51372549019607838, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.58823529411764708, \"Green Component\" : 0.58039215686274515 }, \"Ansi 7 Color\" : { \"Red Component\" : 0.93333333333333335, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.83529411764705885, \"Green Component\" : 0.90980392156862744 }, \"Ansi 8 Color\" : { \"Red Component\" : 0.3407056094147265, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.352935791015625, \"Alpha Component\" : 1, \"Green Component\" : 0.35044445790185969 }, \"Bold Color\" : { \"Red Component\" : 0.57647058823529407, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.63137254901960782, \"Green Component\" : 0.63137254901960782 }, \"Ansi 9 Color\" : { \"Red Component\" : 0.79607843137254897, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.086274509803921581, \"Green Component\" : 0.29411764705882354 }, \"Custom Directory\" : \"No\", \"Ansi 5 Color\" : { \"Red Component\" : 0.82745098039215681, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.50980392156862742, \"Green Component\" : 0.21176470588235294 }, \"Rows\" : 25, \"Default Bookmark\" : \"No\", \"Cursor Guide Color\" : { \"Red Component\" : 0.70213186740875244, \"Color Space\" : \"sRGB\", \"Blue Component\" : 1, \"Alpha Component\" : 0.25, \"Green Component\" : 0.9268307089805603 }, \"Non-ASCII Anti Aliased\" : true, \"Use Bright Bold\" : true, \"Ansi 10 Color\" : { \"Red Component\" : 0.34509803921568627, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.45882352941176469, \"Green Component\" : 0.43137254901960786 }, \"Ambiguous Double Width\" : false, \"Jobs to Ignore\" : [ \"rlogin\", \"ssh\", \"slogin\", \"telnet\" ], \"Ansi 15 Color\" : { \"Red Component\" : 0.99215686274509807, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.8901960784313725, \"Green Component\" : 0.96470588235294119 }, \"Foreground Color\" : { \"Red Component\" : 0.51372549019607838, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.58823529411764708, \"Green Component\" : 0.58039215686274515 }, \"Bound Hosts\" : [ ], \"Working Directory\" : \"\\/Users\\/yu.long\", \"Blinking Cursor\" : false, \"Disable Window Resizing\" : true, \"Sync Title\" : false, \"Prompt Before Closing 2\" : false, \"BM Growl\" : true, \"Command\" : \"\", \"Description\" : \"Default\", \"Mouse Reporting\" : true, \"Screen\" : -1, \"Selection Color\" : { \"Red Component\" : 0.027450980392156866, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.25882352941176473, \"Green Component\" : 0.21176470588235294 }, \"Columns\" : 80, \"Idle Code\" : 0, \"Ansi 13 Color\" : { \"Red Component\" : 0.42352941176470588, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.7686274509803922, \"Green Component\" : 0.44313725490196076 }, \"Custom Command\" : \"No\", \"ASCII Anti Aliased\" : true, \"Non Ascii Font\" : \"Monaco 12\", \"Vertical Spacing\" : 1, \"Use Bold Font\" : true, \"Option Key Sends\" : 0, \"Selected Text Color\" : { \"Red Component\" : 0.57647058823529407, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.63137254901960782, \"Green Component\" : 0.63137254901960782 }, \"Background Color\" : { \"Red Component\" : 0, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.21176470588235294, \"Green Component\" : 0.16862745098039217 }, \"Character Encoding\" : 4, \"Ansi 11 Color\" : { \"Red Component\" : 0.396078431372549, \"Color Space\" : \"sRGB\", \"Blue Component\" : 0.51372549019607838, \"Green Component\" : 0.4823529411764706 }, \"Use Italic Font\" : true, \"Unlimited Scrollback\" : false, \"Keyboard Map\" : { \"0xf700-0x260000\" : { \"Text\" : \"[1;6A\", \"Action\" : 10 }, \"0x37-0x40000\" : { \"Text\" : \"0x1f\", \"Action\" : 11 }, \"0x32-0x40000\"","date":"2023-06-23","objectID":"/posts/setup-guide/:2:2","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"3 Git Git is a version control system which thinks of data as a series of snapshots of a miniature filesystem. On mac it will be installed together with Xcode. brew install git Configurations which values specific personally to the user and affects all of the repositories. git --global user.name \"\u003cyourName\u003e\" git --global user.email yourEmail@xxx.com By following the instructions of SSH, you also need to put your public key to the remote sever, such GitHub, BitBucket, GitLab… ssh-keygen -t rsa -C \"yourEmail@xxx.com\" pbcopy \u003c ~/.ssh/id_rsa.pub ","date":"2023-06-23","objectID":"/posts/setup-guide/:3:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"ignore files Create the file ~/.gitignore as shown below, # Folder view configuration files .DS_Store Desktop.ini # Thumbnail cache files ._* Thumbs.db # Files that might appear on external disks .Spotlight-V100 .Trashes # Compiled Python files *.pyc # Compiled C++ files *.out # Application specific files venv node_modules .sass-cache and set the default ignore files for git by running following command, git config --global core.excludesfile ~/.gitignore ","date":"2023-06-23","objectID":"/posts/setup-guide/:3:1","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"multi account If you want to set multiple git account on local, ~/.ssh/config is what you want to update, Host work.github.com HostName github.com AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/github-work IdentitiesOnly yes Host personal.github.com HostName github.com AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/github-personal IdentitiesOnly yes And change the repository config file .git/config to use correct remote url, [remote \"origin\"] url = git@personal.github.com:designcise/my-repo.git or use the command line to set, git remote set-url origin git@personal.github.com:designcise/my-repo.git ","date":"2023-06-23","objectID":"/posts/setup-guide/:3:2","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"4 Visual Studio Code Visual Studio Code is lightweight code editor with powerful plugins, brew install --cask visual-studio-code Since we downloaded powerline font to use for terminal, need to set it for vscode terminal as well, [Command] + [Shift] + P and add the following line into “user settings”, { \"terminal.integrated.fontFamily\": \"Meslo LG M DZ for Powerline\" } ","date":"2023-06-23","objectID":"/posts/setup-guide/:4:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"5 Python Python is an interpreted language, interactively, and object-oriented. Here, we use Pyenv to manage multiple version in one machine, brew install pyenv Also insert following lines into ~/.zshrc to enable shims and autocompletion # pyenv eval \"$(pyenv init -)\" Then you install any version of Python and use it via pyenv commands. ","date":"2023-06-23","objectID":"/posts/setup-guide/:5:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"6 Java Java is a popular programming language which aims to “Write once, Run everywhere”. Here, we use Jenv to manage multiple version in one machine, brew install jenv And also config the settings of zsh in ~/.zshrc, # jenv eval \"$(jenv init -)\" As for JDK, Java Development Kit, we need to download from HomePage for specific version. Then you can add it by jenv as below, jenv add /Library/Java/JavaVirtualMachines/\u003cversion\u003e/Contents/Home ","date":"2023-06-23","objectID":"/posts/setup-guide/:6:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"Maven Maven is used to manage Java project and auto build the application. brew install maven JDK need to be configured when using mvn, here we force it to use the version that jenv is using, jenv enable-plugin maven ","date":"2023-06-23","objectID":"/posts/setup-guide/:6:1","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"7 Ruby Ruby is server side script language, fully object-oriented. brew install rbenv ruby-build rbenv-default-gems rbenv-gemset rbenv and ruby-build are used to manage and install Ruby versions for development environment, set the condifgurations in ~/.zshrc as following, # rbenv eval \"$(rbenv init -)\" ","date":"2023-06-23","objectID":"/posts/setup-guide/:7:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"8 Node.js NodeJs is the JavaScript which is running on the server side, also known as a JavaScript runtime built on Chrome’s V8 JavaScript engine. Here, we use nvm to manage different version of node, brew install nvm ~/.zshrc needs to be configured for it, # nvm export NVM_DIR=\"$HOME/.nvm\" [ -s \"/opt/homebrew/opt/nvm/nvm.sh\" ] \u0026\u0026 \\. \"/opt/homebrew/opt/nvm/nvm.sh\" # This loads nvm [ -s \"/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm\" ] \u0026\u0026 \\. \"/opt/ homebrew/opt/nvm/etc/bash_completion.d/nvm\" # This loads nvm bash_completion ","date":"2023-06-23","objectID":"/posts/setup-guide/:8:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"9 Go Go is an open source programming language, which is designed for web server, storage cluster or centralized server. brew install go ","date":"2023-06-23","objectID":"/posts/setup-guide/:9:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"10 MySQL MySQL is a widely used database software, and SQL stands for Structured Query Language. brew install mysql To have lanuchd start MySQL as a background service, brew services start mysql ","date":"2023-06-23","objectID":"/posts/setup-guide/:10:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"},{"categories":["setup"],"content":"Reference macOS Setup Guide ","date":"2023-06-23","objectID":"/posts/setup-guide/:11:0","tags":["git","vscode","iterm","python","mysql","java","ruby","node","go"],"title":"Setup Guide","uri":"/posts/setup-guide/"}]